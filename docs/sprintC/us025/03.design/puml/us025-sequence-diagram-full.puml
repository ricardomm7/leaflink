@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "GSM" as GSM
participant ":CancelAgendaEntryUI" as UI
participant ":CancelAgendaEntryController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "entryRepository\n:EntryRepository" as EntryRepo
participant ":NotificationService" as NotificationService
participant ":AgendaEntryMapper" as AgendaEntryMapper
participant "agendaEntryDto\n:AgendaEntryDto" as AgendaEntryDto
participant "agendaEntry\n:AgendaEntry" as AgendaEntry
participant ":ApplicationSession" as ApplicationSession
participant "applicationSession\n:ApplicationSession" as applicationSession1



activate GSM

    GSM -> UI : asks to postpone an agenda entry
    activate UI

        UI -> CTRL **: create
        activate CTRL

            CTRL -> RepositorySingleton : getInstance()
            activate RepositorySingleton

                RepositorySingleton --> CTRL : repositories
            deactivate RepositorySingleton

            CTRL -> PLAT : getEntryRepository()
            activate PLAT

                PLAT --> CTRL : entryRepository
            deactivate PLAT

             deactivate CTRL


        UI -> CTRL: getAgendaEntryList()
        activate CTRL

            CTRL -> ApplicationSession : getInstance()
            activate ApplicationSession
            ApplicationSession --> CTRL : applicationSession
            deactivate ApplicationSession

            CTRL -> applicationSession1 : getCurrentSession()
            activate applicationSession1
            applicationSession1 --> CTRL : loggedUser
            deactivate applicationSession1

            CTRL -> EntryRepo: getAgendaEntryList(loggedUser)
            activate EntryRepo

            EntryRepo --> CTRL: agendaEntryList
            deactivate EntryRepo

            CTRL -> AgendaEntryMapper : toDtoList(agendaEntry)
            deactivate CTRL
            activate AgendaEntryMapper

            loop
                AgendaEntryMapper -> AgendaEntryDto** : create
                activate AgendaEntryDto

                AgendaEntryDto --> AgendaEntryMapper : agendaEntryDto
                deactivate AgendaEntryDto
            end

            AgendaEntryMapper --> CTRL : agendaEntryDtoList
            deactivate AgendaEntryMapper
            activate CTRL

            CTRL --> UI : agendaEntryDtoList
        deactivate CTRL

        UI -> GSM : shows the list of agenda entry and requests to select one
    deactivate UI

    GSM -> UI : selects an agenda entry
    activate UI

    UI --> GSM : Shows all data and requests confirmation
    deactivate UI

    GSM -> UI: confirms data
    activate UI

        UI -> CTRL : cancelAgendaEntry(agendaEntryDto)
        deactivate UI
        activate CTRL

            CTRL -> AgendaEntryMapper: toDomain(agendaEntryDto)
            deactivate CTRL
            activate AgendaEntryMapper

                AgendaEntryMapper -> AgendaEntry** : create
                activate AgendaEntry

                AgendaEntry --> AgendaEntryMapper : agendaEntry
                deactivate AgendaEntry

            AgendaEntryMapper --> CTRL: agendaEntry
            deactivate AgendaEntryMapper
            activate CTRL



            CTRL -> EntryRepo : cancelAgendaEntry(agendaEntryDto)
            deactivate CTRL
            activate EntryRepo


            EntryRepo -> EntryRepo : updateEntryStatus(agendaEntry)


            EntryRepo --> CTRL : success
            deactivate EntryRepo
            activate CTRL

            CTRL --> UI : success
            deactivate CTRL
            activate UI

            UI -> CTRL : notifyTeam(agendaEntry)
            deactivate UI
            activate CTRL

            CTRL -> NotificationService : notifyTeam(collaboratorsList, agendaEntry)
            deactivate CTRL
            activate NotificationService

                NotificationService -> NotificationService : buildEmailBody(collaboratorsList,agendaEntry)
                activate NotificationService

                NotificationService --> NotificationService : email
                deactivate NotificationService

                NotificationService -> NotificationService : writeNotification(collaboratorsList, subject, email, agendaEntry)
                activate NotificationService

                NotificationService --> NotificationService : success
                deactivate NotificationService

                NotificationService --> CTRL : success
                deactivate NotificationService
        activate CTRL

        CTRL --> UI : success
    deactivate CTRL
    activate UI

    UI --> GSM : displays a success message (agendaEntry canceled successfully)
deactivate UI

@enduml
