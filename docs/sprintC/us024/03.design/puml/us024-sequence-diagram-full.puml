@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "GSM" as GSM
participant ":PostponeAgendaEntryUI" as UI
participant ":PostponeAgendaEntryController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "entryRepository\n:EntryRepository" as EntryRepo
participant ":NotificationService" as NotificationService
participant ":AgendaEntryMapper" as AgendaEntryMapper
participant "agendaEntryDto\n:AgendaEntryDto" as AgendaEntryDto
participant "agendaEntry\n:AgendaEntry" as AgendaEntry



activate GSM

    GSM -> UI : asks to postpone an agendaEntry
    activate UI

        UI -> CTRL **: create
        activate CTRL

            CTRL -> RepositorySingleton : getInstance()
            activate RepositorySingleton

                RepositorySingleton --> CTRL : repositories
            deactivate RepositorySingleton

            CTRL -> PLAT : getEntryRepository()
            activate PLAT

                PLAT --> CTRL : entryRepository
            deactivate PLAT

             deactivate CTRL


        UI -> CTRL: getAgendaEntryList(GSM)

        activate CTRL

            CTRL -> EntryRepo: getAgendaEntryListByGSM(GSM)
            activate EntryRepo

            EntryRepo --> CTRL: agendaEntryList
            deactivate EntryRepo

            CTRL -> AgendaEntryMapper : toDtoList(agendaEntry)
            deactivate CTRL
            activate AgendaEntryMapper

            loop
                AgendaEntryMapper -> AgendaEntryDto** : create
                activate AgendaEntryDto

                AgendaEntryDto --> AgendaEntryMapper : agendaEntryDTO
                deactivate AgendaEntryDto
            end
            AgendaEntryMapper --> CTRL : agendaEntryDTO
            deactivate AgendaEntryMapper
            activate CTRL


            CTRL --> UI : agendaEntryDtoList
        deactivate CTRL

        UI -> GSM : shows the list of agendaEntry and requests to select
    deactivate UI

    GSM -> UI : selects an agendaEntry
    activate UI

        UI --> GSM : requests new date for the selected agendaEntry
    deactivate UI

    GSM -> UI : types new date
    activate UI

    UI --> GSM : Shows all data and requests confirmation
    deactivate UI

    GSM -> UI: confirms data
    activate UI

        UI -> CTRL : postPoneEntry(agendaEntryDto, newDate)
        deactivate UI
        activate CTRL

            CTRL -> AgendaEntryMapper : toDomain(agendaEntryDto)
            deactivate CTRL
            activate AgendaEntryMapper

                AgendaEntryMapper -> AgendaEntry** : create
                activate AgendaEntry

                AgendaEntry --> AgendaEntryMapper : agendaEntry
                deactivate AgendaEntry

            AgendaEntryMapper --> CTRL : agendaEntry
            deactivate AgendaEntryMapper
            activate CTRL

            CTRL -> EntryRepo : updateAgendaEntry(agendaEntry, newDate, POSTPONED)
            deactivate CTRL
            activate EntryRepo

                EntryRepo -> EntryRepo : validateNewDate(newDate)
                EntryRepo -> EntryRepo : updateAgendaEntryStatus(agendaEntry, POSTPONED)

                EntryRepo -> agendaEntry **: create(agendaEntry, newDate, PLANNED)
                activate agendaEntry

                agendaEntry--> EntryRepo: agendaEntry
                deactivate agendaEntry

                EntryRepo -> EntryRepo: addAgendaEntry(agendaEntry)


            EntryRepo --> CTRL : success
            deactivate EntryRepo
            activate CTRL



            CTRL -> NotificationService : notifyTeam(collaboratorsList ,agendaEntry, newDate)
            deactivate CTRL
            activate NotificationService

                NotificationService -> NotificationService : buildEmailBody(collaboratorsList,agendaEntry,newDate)
                activate NotificationService

                NotificationService --> NotificationService : email
                deactivate NotificationService

                NotificationService -> NotificationService : writeNotification(collaboratorsList, subject, email, agendaEntry, newDate)
                activate NotificationService

                NotificationService --> NotificationService : success
                deactivate NotificationService

                NotificationService --> CTRL : success
                deactivate NotificationService
        activate CTRL

        CTRL --> UI : success
    deactivate CTRL
    activate UI

    UI --> GSM : displays a success message (agendaEntry postponed successfully)
deactivate UI

@enduml
