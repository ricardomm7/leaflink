@startuml
skinparam shadowing false
skinparam line type polyline

package UI {
    class PostponeAgendaEntryUI {
    }
}

package CONTROLLER {
    class PostponeAgendaEntryController {
        - repositories: Repositories
        - entryRepository: EntryRepository
        + PostponeAgendaEntryController()
        + getAgendaEntryList(gsm: UserSession): List<AgendaEntryDto>
        + postponeEntry(agendaEntryDto: AgendaEntryDto, newDate: LocalDate): boolean
        - notifyTeam(agendaEntryDto: AgendaEntryDto, newDate: LocalDate): void
    }
}

package DOMAIN {
    package REPOSITORY {
        class Repositories {
            - instance: Repositories
            - entryRepository: EntryRepository
            + Repositories()
            + getInstance(): Repositories
            + getEntryRepository(): EntryRepository
        }

        class EntryRepository {
            - agendaEntryList: List<AgendaEntry>
            + EntryRepository()
            + getAgendaEntryListByGSM(String: email): List<AgendaEntryDto>
            + updateAgendaEntry(agendaEntry: AgendaEntry, newDate: LocalDate, POSTPONED: ProgressStatus): boolean
            - updateEntryStatus(agendaEntry: AgendaEntry, POSTPONED: ProgressStatus): void
        }
    }



    package MODEL {
        class AgendaEntry {
            - startingDate: LocalDate
            - progressStatus: ProgressStatus
            - assignedTeam: Team
            - assignedVehicle: List<Vehicle>
            + getStartingDate(): LocalDate
            + getProgressStatus(): ProgressStatus
            - setStartingDate(newDate: LocalDate): void
            - setProgressStatus(newStatus: ProgressStatus): void
            + AgendaEntry(agendaEntry: AgendaEntry, newDate: LocalDate, progressStatus: PLANNED)
        }

        class ToDoEntry{
            - title: String
            - description: String
            - duration: int
            - greenSpace: GreenSpace
        }

        class NotificationService {
            - buildEmailBody(collaboratorsList: List<Collaborator> , agendaEntry: AgendaEntry, newDate :LocalDate): String
            + notifyTeam(collaboratorsList: List<Collaborator>, agendaEntry: AgendaEntry, email: String newDate: LocalDate): boolean
        }
    }
}
package DTO {
        class AgendaEntryMapper {
            + toDto(agendaEntry: AgendaEntry): AgendaEntryDto
            + toDomain(agendaEntryDto: AgendaEntryDto): AgendaEntry
            + toDtoList(agendaEntries: List<AgendaEntry>): List<AgendaEntryDto>
        }

        class AgendaEntryDto {
            - title: String
            - description: String
            - duration: int
            - urgencyStatus: UrgencyStatus
            - greenSpace: GreenSpaceDto
            - startingDate: LocalDate
            - progressStatus: ProgressStatus
            - assignedTeam: List<VehicleDto>
            - assignedTeam: TeamDto
            + AgendaEntryDto(title: String, description: String, duration: int, urgencyStatus: UrgencyStatus, greenSpace: GreenSpaceDto, startingDate: LocalDate, progressStatus: ProgressStatus, assignedTeam: TeamDto, assignedVehicle: List<VehicleDto>)
            + getTitle(): String
            + getDescription(): String
            + getDuration(): int
            + getUrgencyStatus(): UrgencyStatus
            + getGreenSpace(): GreenSpaceDto
            + getStartingDate(): LocalDate
            + getProgressStatus(): ProgressStatus
            + getAssignedTeam(): TeamDto
            + getAssignedVehicle(): List<VehicleDto>
            + setAssignedTeam(team: TeamDto): void
            + setAssignedVehicle(vehicleList: List<VehicleDto>): void
        }
    }

PostponeAgendaEntryUI ..> PostponeAgendaEntryController
PostponeAgendaEntryController ..> Repositories
Repositories --> Repositories: instance
PostponeAgendaEntryController ..> EntryRepository
Repositories --> EntryRepository
EntryRepository --> "*" AgendaEntry
AgendaEntryMapper ..> AgendaEntryDto
AgendaEntryMapper ..> AgendaEntry
PostponeAgendaEntryController ..> NotificationService
AgendaEntry -> ToDoEntry

@enduml
