@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "Collaborator" as Col
participant ":ListTaskSpaceUI" as UI
participant ":ListTaskController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as REP
participant "collaboratorRepository\n:CollaboratorRepository" as collaboratorRepository
participant "teamRepository\n:TeamRepository" as teamRepository
participant "teamList\n:List<Team>" as LISTTEAM
participant "team:Team" as TEAM
participant "taskRepository\n:TaskRepository" as taskRepository
participant "taskList\n:List<Task>" as LISTTASK
participant "statusList\n:List<String>" as LISTSTATUS
participant "agenda\n:Agenda" as AGENDA
participant ":EntryMapper" as Mapper
participant "listEntriesDto\n:List<EntryDto>" as LISTENTRIESDTO
participant "entryDto\n:EntryDto" as DTO
participant "agendaEntries\n:List<AgendaEntries>" as AGENDAENTRIES

activate Col

Col -> UI : asks to consult the entry assigned to himself
    activate UI

    UI -> CTRL** : create
    UI -> CTRL : getCollaboratorThoughEmail(email)
        activate CTRL

        CTRL -> RepositorySingleton : getInstance()
            activate RepositorySingleton

            RepositorySingleton --> CTRL : repositories
            deactivate RepositorySingleton

        CTRL -> REP : getCollaboratorRepository
            activate REP

            REP --> CTRL : collaboratorRepository
            deactivate REP

        CTRL -> collaboratorRepository : getCollaboratorThoughEmail(email)
            activate collaboratorRepository

            collaboratorRepository -> collaboratorRepository : getCollaboratorThoughEmail(email)
            activate collaboratorRepository

            collaboratorRepository --> collaboratorRepository : email
            deactivate collaboratorRepository

            collaboratorRepository --> CTRL : collaborator

                deactivate collaboratorRepository

            deactivate collaboratorRepository
        CTRL --> UI : collaborator
        deactivate CTRL

    UI --> Col : asks to select the beginning and end date of the search
    deactivate UI

Col -> UI : selects the beginning and end date
    activate UI

    UI -> CTRL : getStatusList()
        activate CTRL

        CTRL -> RepositorySingleton : getInstance()
            activate RepositorySingleton

            RepositorySingleton --> CTRL : repositories
            deactivate RepositorySingleton

        CTRL -> REP : getTaskRepository()
            activate REP

            REP --> CTRL : taskRepository
            deactivate REP

        CTRL -> taskRepository : getStatusList()
            activate taskRepository

            taskRepository --> LISTSTATUS** : create()
                loop for each status in the system
                    taskRepository -> LISTSTATUS : add(status)
                        activate LISTSTATUS
                end
            LISTSTATUS --> taskRepository : statusList
            deactivate LISTSTATUS

        taskRepository --> CTRL : statusList
        deactivate taskRepository

        CTRL --> UI : statusList
        deactivate CTRL

    UI --> Col : asks to select the type of status he wants to consult
    deactivate UI

Col -> UI : Selects the type he wants to consult
    activate UI

    UI --> Col : asks for confirmation
    deactivate UI

Col -> UI : confirms that he wants to create the list
    activate UI

    UI -> CTRL : getTaskList(collaborator,dateI,dateF,typeStatus)
        activate CTRL

        CTRL -> RepositorySingleton : getInstance()
            activate RepositorySingleton

            RepositorySingleton --> CTRL : repositories
            deactivate RepositorySingleton

        CTRL -> REP : getTeamRepository()
            activate REP

            REP --> CTRL : teamRepository
            deactivate REP

        CTRL -> teamRepository : getTeamsThoughCollaborator(collaborator)
            activate teamRepository

            teamRepository -> LISTTEAM** : create()
                loop for each team in the system
                    teamRepository -> TEAM : validateCollaboratorTeam(collaborator,team)
                        activate TEAM
                        TEAM -> TEAM : inTeam = validateCollaboratorTeam(collaborator,team)
                        TEAM --> teamRepository : inTeam
                        deactivate TEAM
                    opt inTeam == true
                        teamRepository -> LISTTEAM : addTeamOfCollaborator(team)
                            activate LISTTEAM
                    end

                end
            LISTTEAM --> teamRepository : teamList
            deactivate LISTTEAM
            teamRepository --> CTRL : teamList
            deactivate teamRepository

        CTRL -> RepositorySingleton : getInstance()
            activate RepositorySingleton

            RepositorySingleton --> CTRL : repositories
            deactivate RepositorySingleton

        CTRL -> REP : getTaskRepository()
            activate REP

            REP --> CTRL : taskRepository
            deactivate REP

        CTRL -> taskRepository : getTaskList(teamList,dateI,dateF,typeStatus)
            activate taskRepository

            taskRepository -> LISTTASK** : create()
                loop for each task in the system
                    opt ((typeStatus() == task.getStatus() && (team == task.getTeam)) && (dateI <= task.getDateI()) && (dateF >= task.getDateF()))
                        taskRepository -> LISTTASK : addTaskOfCollaborator(task)
                            activate LISTTASK
                    end

                end
            LISTTASK --> taskRepository : taskList
            deactivate LISTTASK

            taskRepository --> CTRL : taskList
        deactivate taskRepository

        CTRL -> RepositorySingleton : getInstance()
            activate RepositorySingleton

            RepositorySingleton --> CTRL : repositories
            deactivate RepositorySingleton

        CTRL -> REP : getAgenda()
            activate REP

            REP --> CTRL : Agenda
            deactivate REP

        CTRL -> AGENDA : getCollaboratorAgendaEntries(taskList)
            activate AGENDA

            AGENDA --> AGENDAENTRIES** : create()
                loop for each task
                    loop for each agendaEntry
                        opt (agendaEntry.getTask() == task)
                            AGENDA -> AGENDAENTRIES : add(agendaEntry)
                                activate AGENDAENTRIES
                        end
                    end
                end
            AGENDAENTRIES --> AGENDA : listEntries
            deactivate AGENDAENTRIES
        AGENDA --> CTRL : listEntries
        deactivate AGENDA

        CTRL -> Mapper : toDTOList(listEntries)
            activate Mapper

            Mapper --> LISTENTRIESDTO** : create()
                loop for each entry in entryList
                    Mapper -> AGENDAENTRIES : get(i)
                        activate AGENDAENTRIES

                        AGENDAENTRIES --> Mapper : entry
                        deactivate AGENDAENTRIES
                    Mapper -> DTO : toDTOEntry(entry)
                        activate DTO

                        DTO --> Mapper : entryDto
                        deactivate DTO
                    Mapper -> LISTENTRIESDTO : add(entryDto)
                        activate LISTENTRIESDTO
                end


            LISTENTRIESDTO --> Mapper : listEntriesDto
             deactivate LISTENTRIESDTO

             Mapper --> CTRL : listEntriesDto
            deactivate Mapper

        CTRL --> UI : listEntriesDto
        deactivate CTRL

    UI --> Col : displays greens spaces sorted by date
    deactivate UI

deactivate Col
@enduml
