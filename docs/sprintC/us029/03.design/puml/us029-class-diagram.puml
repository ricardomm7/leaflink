@startuml
skinparam shadowing false
skinparam line type polyline

package UI {
    class RecordEntryUI {
    }
}

package CONTROLLER {
    class RecordEntryController {
        - repositories: Repositories
        - entryRepository: EntryRepository
        - teamRepository: TeamRepository
        + RecordEntryController()
        + getAgendaEntryOfCollaboratorList(collaborator: UserSession): List<AgendaEntryDto>
        + recordEntryCompletion(entryDto: AgendaEntryDto): boolean
    }
}

package DOMAIN {
    package REPOSITORY {
        class Repositories {
            - instance: Repositories
            - entryRepository: EntryRepository
            - teamRepository: TeamRepository
            - Repositories()
            + getInstance(): Repositories
            + getEntryRepository(): EntryRepository
            + getTeamRepository(): TeamRepository
        }

        class EntryRepository {
            - agendaEntryList: List<AgendaEntry>
            + EntryRepository()
            + getAgendaEntriesList(): List<AgendaEntry>
            + recordAgendaEntryCompletion(agendaEntry: AgendaEntry, status: ProgressStatus): boolean
        }

        class TeamRepository {
            - agendaEntryList: List<AgendaEntry>
            + TeamRepository()
            + getAgendaEntriesAssignedToCollaborator(collaborator: UserSession): List<AgendaEntry>
        }
    }

    package MODEL {
        class AgendaEntry {
            - title: String
            - description: String
            - duration: int
            - urgencyStatus: UrgencyStatus
            - greenSpace: GreenSpace
            - startingDate: LocalDate
            - progressStatus: ProgressStatus
            + AgendaEntry(title: String, description: String, duration: int, urgencyStatus: UrgencyStatus, greenSpace: GreenSpace, startingDate: LocalDate, progressStatus: ProgressStatus)
            + setStatus(status: ProgressStatus): void
            + setAvailable(): void
            + setTeamAvailable(): void
        }
    }
}
    package DTO {
        class AgendaEntryMapper {
            + toDto(agendaEntry: AgendaEntry): AgendaEntryDto
            + toDomain(agendaEntryDto: AgendaEntryDto): AgendaEntry
            + toDtoList(agendaEntries: List<AgendaEntry>): List<AgendaEntryDto>
        }

        class AgendaEntryDto {
            - title: String
            - description: String
            - duration: int
            - urgencyStatus: UrgencyStatus
            - greenSpace: GreenSpaceDto
            - startingDate: LocalDate
            - progressStatus: ProgressStatus
            + AgendaEntryDto(title: String, description: String, duration: int, urgencyStatus: UrgencyStatus, greenSpace: GreenSpaceDto, startingDate: LocalDate, progressStatus: ProgressStatus)
            + getTitle(): String
            + getDescription(): String
            + getDuration(): int
            + getUrgencyStatus(): UrgencyStatus
            + getGreenSpace(): GreenSpaceDto
            + getStartingDate(): LocalDate
            + getProgressStatus(): ProgressStatus
        }
    }


RecordEntryUI ..> RecordEntryController
RecordEntryController ..> Repositories
Repositories --> Repositories: instance
RecordEntryController ..> EntryRepository
RecordEntryController ..> TeamRepository
Repositories --> EntryRepository
Repositories --> TeamRepository
EntryRepository --> "*" AgendaEntry
AgendaEntryMapper ..> AgendaEntryDto
AgendaEntryMapper ..> AgendaEntry

@enduml
